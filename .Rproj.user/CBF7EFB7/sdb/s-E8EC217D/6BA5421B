{
    "collab_server" : "",
    "contents" : "remove_rd_2yrsback<- function(d_p = daily_purchases_act,\n                              rd_effect,\n                              markets,#=c(\"se\",\"at\",\"no\",\"dk\",\"fi\",\"de\",\"nl\",\"uk\",\"us\")\n                              forecast_range){\n\n  #'Remove red days; 2 years back in time.\n  #'\n  #'DESCRIPTION HERE\n  #'\n  #'@param d_p data frame with daily actuals data. Defaults to daily_purchases_act.\n  #'@param rd_effect Empty input matrix for red day effect values.\n  #'@param markets Markets which we want to estimate on.\n  #'@param forecast_range Forecast range.\n  #'@keywords red_day holiday\n  #'@export\n  #'@examples\n  #'EXAMPLE HERE Change\n\n  require(lubridate)\n  require(dplyr)\n  require(tidyr)\n\n  # forecast_range <- period\n  min_date <- min(forecast_range$forecast_period) - years(1)\n  period_length <- max(forecast_range$forecast_period) - years(1) - min_date + 1\n  inference_range <- data.frame(inference_period = as.Date(seq(as.Date(min_date),\n                                by = \"day\", length.out = period_length)))\n\n  min_date <- min(forecast_range$forecast_period) - years(2)\n  period_length <- max(forecast_range$forecast_period) - years(2) - min_date + 1\n  p_inference_range <- data.frame(inference_period = as.Date(seq(as.Date(min_date),\n                                by = \"day\", length.out = period_length)))\n\n  min_date <- min(forecast_range$forecast_period) - years(3)\n  period_length <- max(forecast_range$forecast_period) - years(3) - min_date + 1\n  p_p_inference_range <- data.frame(inference_period = as.Date(seq(as.Date(min_date),\n                                by = \"day\", length.out = period_length)))\n\n#Creating Black Friday Effect data frame----------------------------------------\n  bf_effect <- data.frame(country = markets,\n                          mon_before = 0,\n                          tue_before = 0,\n                          wed_before = 0,\n                          thu_before = 0,\n                          black_fri = 0,\n                          sat_after = 0,\n                          sun_after = 0,\n                          cyber_mon = 0,\n                          tue_after = 0,\n                          wed_after = 0,\n                          thu_after = 0,\n                          fri_after = 0\n                          )\n#Creating xmas Effect data frame------------------------------------------------\n  xmas_effect <- data.frame(country = markets,\n                           twenty_2 = 0,\n                           twenty_3 = 0,\n                           xmas_eve = 0,\n                           xmas_day = 0,\n                           boxing_day = 0,\n                           twenty_7 = 0,\n                           twenty_8 = 0,\n                           twenty_9 = 0,\n                           thritieth = 0,\n                           nye_eve = 0  )\n#Getting Holidays using the scraper---------------------------------------------\n#  if(!exists(\"holidays\")) {\n#    holidays <- holiday_scraper()\n#    holidays$Date = as.Date(holidays$Date,\"%b %d\")\n#    year(holidays$Date) <- holidays$year\n#    #This might cause errors.\n#    levels(holidays$country) <-c(\"se\",\"at\",\"no\",\"dk\",\"fi\",\"de\",\"nl\",\"uk\",\"us\")\n#    holidays <- holidays %>%\n#    mutate_if(is.factor,as.character)%>%\n#      arrange(country,Date)\n#  }\n#Loop through markets-----------------------------------------------------------\n     for (i in markets)\n       {\n  #Defining and Choosing Red Days from Holiday Scraper----------------------------\n         if(i == \"at\"){\n           red_days <-c(\"National holiday\",\"Observance\")\n         }else if(i == \"de\"){\n           red_days <-c(\"Silent Day\",\"National holiday\",\"Common Local holidays\")\n         }else if(i == \"dk\"){\n           red_days <-c(\"National holiday\")\n         }else if(i == \"fi\"){\n           red_days <-c(\"De facto holiday\",\"National holiday\")\n         }else if(i == \"nl\"){\n           red_days <-c(\"National holiday\")\n         }else if(i == \"no\"){\n           red_days <-c(\"National holiday\",\"National holiday, Flag day\")\n         }else if(i == \"se\"){\n           red_days <-c(\"De facto holiday\",\"Public holiday\")\n         }else if(i == \"uk\"){\n           red_days <-c(\"Bank holiday\",\"Christian\",\"Common Local holidays\",\"Public holiday\")\n         }else if(i == \"us\"){\n           red_days <-c(\"Federal Holiday\")\n         }\n  #holidays for current country for last 3 years----------------------------------\n         c_holidays <- holidays %>%\n           filter(country == i,\n                  Date %in% inference_range$inference_period,\n                  holiday_type %in% red_days)\n         p_holidays <- holidays %>%\n           filter(country == i,\n                  Date %in% p_inference_range$inference_period,\n                  holiday_type %in% red_days)\n         p_p_holidays <- holidays %>%\n           filter(country == i,\n                  Date %in% p_p_inference_range$inference_period,\n                  holiday_type %in% red_days)\n  #RD_TEMP effects NEEDS TO BE CREATED FROM HOLIDAYS------------------------------\n        rd_temp<-holidays %>%\n          filter(country == i,\n                 Date %in% forecast_range$forecast_period,\n                 holiday_type %in% red_days) %>%\n          select(country, year, Date, holiday_name) %>%\n          mutate(effect = 0) %>%\n          mutate(next_wd_effect = 0) %>%\n          mutate(month = month(Date))\n  #Working Days for last_year,p_year, p_p_year -----------------------------------\n        working_days <- d_p %>%\n          filter(Country_Code == i,\n                 Activation_date %in% inference_range$inference_period,\n                 !(Activation_date %in% c_holidays$Date) )###MAKE SURE ONLY RED DAYS ARE REMOVED\n        p_working_days <- d_p %>%\n          filter(Country_Code == i,\n                 Activation_date %in% p_inference_range$inference_period,\n                 !(Activation_date %in% p_holidays$Date) )###MAKE SURE ONLY RED DAYS ARE REMOVED\n        p_p_working_days <- d_p %>%\n          filter(Country_Code == i,\n                 Activation_date %in% p_p_inference_range$inference_period,\n                 !(Activation_date %in% p_p_holidays$Date) )###MAKE SURE ONLY RED DAYS ARE REMOVED\n  #Temporary Daily Purchases------------------------------------------------------\n        b <- d_p %>%\n          filter(d_p$Country_Code == i,\n                 Activation_date %in% inference_range$inference_period)\n        p_b <- d_p %>%\n          filter(d_p$Country_Code == i,\n                 Activation_date %in% p_inference_range$inference_period)\n        p_p_b <- d_p %>%\n          filter(d_p$Country_Code == i,\n                 Activation_date %in% p_p_inference_range$inference_period)\n  #Loop through Holiday-----------------------------------------------------------\n        for (k in seq(1,length(c_holidays$Date) ) )\n          {\n          #Change volume to next same working day\n          if(\n            ( (wday(c_holidays$Date[k]) %in% c(1, 7) ) |\n            (c_holidays$holiday_name[k] %in% c(\"Christmas Eve\",\"Christmas Day\",\n            \"Boxing Day\",\"New Year's Eve\",\"Christmas Day observed\",\"Bank Holiday\",\n            \"Second Day of Christmas\",\"St. Stephen's Day\",\"2nd Christmas Day\") ) )\n            )\n          {\n            if(wday(c_holidays$Date[k]) %in% c(1, 7) )\n              {\n              p_hol <- which(p_holidays$holiday_name == c_holidays$holiday_name[k])\n\n              if(wday(p_holidays$Date[p_hol]) %in% c(1, 7)  )\n                {\n                p_p_hol<- which(p_p_holidays$holiday_name == c_holidays$holiday_name[k])\n\n                if(wday(p_p_holidays$Date[p_p_hol]) %in% c(1, 7))\n                  {\n                  #do nothing if on weekend 3 years in a row\n                }else{#Quantify if 3 years was not on wkend\n\n                  next_same_weekday <- min( which(\n                    p_p_working_days$day == wday(p_p_holidays$Date[p_p_hol])\n                    & p_p_working_days$Activation_date > p_p_holidays$Date[p_p_hol]\n                    & p_p_working_days$Country_Code == i ) )\n\n                  #perhaps change to average between next_same_weekday and previous_same_weekday\n                  if(!is_empty(p_p_b$Daily_Volume[p_p_b$Activation_date == p_p_holidays$Date[p_p_hol] ])){\n                  rd_temp$effect[k]<- p_p_b$Daily_Volume[p_p_b$Activation_date == p_p_holidays$Date[p_p_hol] ]/p_p_working_days$Daily_Volume[next_same_weekday]\n\n                  next_work_day <- min( which(p_p_working_days$Activation_date > p_p_holidays$Date[p_p_hol]\n                                              & p_p_working_days$Country_Code == i\n                                              & (p_p_working_days$day %in% c(2, 3, 4, 5, 6) ) ) )\n                  next_work_day_sw <- min( which(p_p_working_days$Activation_date > p_p_working_days$Activation_date[next_work_day]\n                                                 & p_p_working_days$Country_Code == i\n                                                 & p_p_working_days$day == p_p_working_days$day[next_work_day] ) )\n\n                  rd_temp$next_wd_effect[k]<- p_p_b$Daily_Volume[p_p_b$Activation_date == p_p_working_days$Activation_date[next_work_day]]/p_p_working_days$Daily_Volume[next_work_day_sw]\n                }\n                  }#Quantify if Holiday fell on a weekend in p_p_year\n              }else{#If holiday fell on a weekend 2 years in a row\n\n                next_same_weekday <- min( which(\n                  p_working_days$day == wday(p_holidays$Date[p_hol])\n                  & p_working_days$Activation_date > p_holidays$Date[p_hol]\n                  & p_working_days$Country_Code == i ) )\n                #perhaps change to average between next_same_weekday and previous_same_weekday\n                if(!is_empty(p_b$Daily_Volume[p_b$Activation_date == p_holidays$Date[p_hol] ])){\n                rd_temp$effect[k]<- p_b$Daily_Volume[p_b$Activation_date == p_holidays$Date[p_hol] ]/p_working_days$Daily_Volume[next_same_weekday]\n\n                next_work_day <- min( which(p_working_days$Activation_date > p_holidays$Date[p_hol]\n                                            & p_working_days$Country_Code == i\n                                            & (p_working_days$day %in% c(2, 3, 4, 5, 6) ) ) )\n                next_work_day_sw <- min( which(p_working_days$Activation_date > p_working_days$Activation_date[next_work_day]\n                                               & p_working_days$Country_Code == i\n                                               & p_working_days$day == p_working_days$day[next_work_day] ) )\n\n                rd_temp$next_wd_effect[k]<- p_b$Daily_Volume[p_b$Activation_date == p_working_days$Activation_date[next_work_day]]/p_working_days$Daily_Volume[next_work_day_sw]\n              }\n                }#Quantify if Holiday did not fall on a weekend in p_year\n            }#If the holiday fell on a weekend last year\n            if(c_holidays$holiday_name[k] %in% c(\"Christmas Eve\",\"Christmas Day\",\n           \"Boxing Day\",\"Christmas Day observed\",\"Bank Holiday\",\n           \"Second Day of Christmas\",\"St. Stephen's Day\",\"2nd Christmas Day\") )\n              {\n\n              prev_same_weekday <- max( which(\n                working_days$day == wday(c_holidays$Date[k])\n                & working_days$Activation_date < c_holidays$Date[k]\n                & working_days$Country_Code == i ) )\n              #perhaps change to average between next_same_weekday and previous_same_weekday\n\n              rd_temp$effect[k]<- b$Daily_Volume[b$Activation_date == c_holidays$Date[k] ]/working_days$Daily_Volume[prev_same_weekday]\n              rd_temp$next_wd_effect[k]<- 1\n            }#Quantifying Xmas eve to Boxing day\n          }else{#If holiday was on a weekend or one of the special holidays\n              next_same_weekday <- min( which(\n                               working_days$day == wday(c_holidays$Date[k])\n                               & working_days$Activation_date > c_holidays$Date[k]\n                               & working_days$Country_Code == i ) )\n\n              rd_temp$effect[k]<- b$Daily_Volume[b$Activation_date == c_holidays$Date[k] ]/working_days$Daily_Volume[next_same_weekday]\n\n              b$Daily_Volume[b$Activation_date == c_holidays$Date[k] ] <- working_days$Daily_Volume[next_same_weekday]\n\n              next_work_day <- min( which(working_days$Activation_date > c_holidays$Date[k]\n                                          & working_days$Country_Code == i\n                                          & (working_days$day %in% c(2, 3, 4, 5, 6) ) ) )\n              next_work_day_sw <- min( which(working_days$Activation_date > working_days$Activation_date[next_work_day]\n                                    & working_days$Country_Code == i\n                                    & working_days$day == working_days$day[next_work_day] ) )\n\n              rd_temp$next_wd_effect[k]<- b$Daily_Volume[b$Activation_date == working_days$Activation_date[next_work_day]]/working_days$Daily_Volume[next_work_day_sw]\n\n              b$Daily_Volume[b$Activation_date == working_days$Activation_date[next_work_day]] <- working_days$Daily_Volume[next_work_day_sw]\n          }#When Holidays was not on a weekend last_year\n        }\n\n        d_p[d_p$Country_Code == i &\n              d_p$Activation_date %in% inference_range$inference_period, ] <- b\n  #Removing and Quantifying Black Friday Effect---------------------------------------------------\n        b <- d_p[d_p$Country_Code == i &\n             d_p$Activation_date %in% inference_range$inference_period, ]\n        j <- max(which(b$day == 6 & b$month == 11 ))#Finds row for BF\n        myts <- ts(b$Daily_Volume[(j+22):(j+8)],end =c(2016), frequency=7)\n        fit <- stl(myts,s.window=7,s.degree=1)\n        f_fit <- forecast(fit,h=12)[[2]]\n\n        bf_effect[bf_effect$country == i, 13:2 ] <- b$Daily_Volume[(j+7):(j-4)]/f_fit\n\n        b$Daily_Volume[(j+7):(j-4)] <- f_fit\n        d_p[d_p$Country_Code == i &\n            d_p$Activation_date %in% inference_range$inference_period , ] <- b\n\n  #Removing and Quantifying Christmas Effect------------------------------------------------------\n\n        # remember to add xmas condition which Monday it peaks\n        b <- d_p[d_p$Country_Code == i &\n                   d_p$Activation_date %in% inference_range$inference_period, ]\n        j <- which(b$month == 12 & day(b$Activation_date) == 24) #Finds row for xmas eve\n        myts <- ts(b$Daily_Volume[(j-17):(j-3)],end =c(2016), frequency=7)\n        fit <- stl(myts,s.window=7,s.degree=1)\n        f_fit <- forecast(fit,h=10)[[2]]\n\n        xmas_effect[xmas_effect$country == i, 2:11 ] <- b$Daily_Volume[(j-2):(j+7)]/f_fit\n\n        b$Daily_Volume[(j-2):(j+7)] <- f_fit\n        d_p[d_p$Country_Code == i & d_p$Activation_date %in% inference_range$inference_period, ] <- b\n\n        rd_effect <- rbind(rd_effect,rd_temp)\n\n     }\n#Return-------------------------------------------------------------------------\n  l=list(d_p,rd_effect,bf_effect,xmas_effect)\n  return(l)\n}\n",
    "created" : 1487073569473.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2525985278",
    "id" : "6BA5421B",
    "lastKnownWriteTime" : 1487074880,
    "last_content_update" : 1487074880598,
    "path" : "~/R/Packages/intraMonthDist/intraMonthDist/R/remove_rd_2yrsback.R",
    "project_path" : "R/remove_rd_2yrsback.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}