{
    "collab_server" : "",
    "contents" : "intra_month <- function(markets = c(\"at\",\"de\",\"dk\",\"fi\",\"nl\",\"no\",\"se\",\"uk\",\"us\"),\n                        min_date = '2017-01-01',\n                        max_date = '2017-12-31') {\n\n  #' Intra month distribution main function\n  #'\n  #' DESCRIPTION HERE\n  #' Process using daily_purchases data for historical distribution estimation.\n  #' Update this table from time to time. No need to do it for each iteration.\n  #'\n  #'\n  #' @param markets vector containing markets for which distribution is to be estimated.\n  #' @param min_date Start date for month distribution estimate.\n  #' @param max_date End date for month distribution estimate.\n  #' @keywords intramonth distribution\n  #' @export\n  #' @examples\n  #' EXAMPLE HERE\n\n\n#Loading Libraries and sourcing R files-----------------------------------------\n  require(tidyverse)\n  require(Rglpk)\n  require(sqldf)\n  require(lubridate)\n  require(dplyr)\n  require(purrr)\n  require(forecast)\n  #source(\"normalise_by_month.R\")\n  #source(\"remove_rd_2yrsback.r\")\n  #source(\"holiday_scraper.r\")\n#Load Daily Volume--------------------------------------------------------------\n  daily_purchases_act <- daily_purchases %>%\n    mutate( Activation_date = as.Date(Activation_date)) %>%\n    mutate( year = year(Activation_date)) %>%\n    mutate( month = month(Activation_date)) %>%\n    mutate( week = format(Activation_date, format=\"%U\")) %>%\n    mutate( day = wday(Activation_date)) %>%\n    filter( Country_Code %in% markets) %>%\n    arrange(Country_Code, Activation_date)\n#Load forecasting period--------------------------------------------------------\n  period_length <- as.Date(max_date) - as.Date(min_date) + 1\n  period <- data.frame(forecast_period = as.Date(seq(as.Date(min_date),\n                                                     by = \"day\", length.out = period_length)))\n\n  market_list <- data.frame(country_code = markets)\n  forecasting_period <- merge(market_list, period, all = TRUE) %>%\n    mutate(forecast_period = as.Date(forecast_period)) %>%\n    mutate(year = year(forecast_period)) %>%\n    mutate(month = month(forecast_period)) %>%\n    mutate(week = format(forecast_period, format = \"%U\")) %>%\n    mutate(day = weekdays(forecast_period)) %>%\n    mutate(volume = 0) %>%\n    arrange(country_code, forecast_period)\n\n#Remove and Quantify Red Day effects--------------------------------------------\n  rd_effect <- data.frame(country = factor(),\n                          year = integer(),\n                          date = as.Date(character()),\n                          holiday_name = character(),\n                          effect=double(),\n                          next_wd_effect = double(),\n                          month = integer())\n  l <- remove_rd_2yrsback(daily_purchases_act,\n                          rd_effect,\n                          markets,\n                          period)\n  daily_purchases <- l[[1]]\n  rd_effect <- l[[2]]\n  bf_effect <- l[[3]]\n  xmas_effect <- l[[4]]\n#Create Monthly Index for the data w/o Red days---------------------------------\n  total_monthly <- daily_purchases %>%\n    group_by(Country_Code, year, month) %>%\n    summarise(monthly_vol = sum(Daily_Volume))\n\n  daily_percentage <- merge(daily_purchases, total_monthly,\n                            by=c(\"Country_Code\", \"month\", \"year\"))\n\n  monthly_percentage <- daily_percentage %>%\n    mutate(normalised_daily = Daily_Volume/monthly_vol) %>%\n    arrange(Country_Code, Activation_date)\n#Loop through markets and match weeks_last_year with forecast_period------------\n  for (i in markets){\n    b <- monthly_percentage %>% #define b as same period for forecast period but last year\n      filter(Country_Code == i ,\n            Activation_date >= (min(period$forecast_period)-years(1) ),\n            Activation_date <= (max(period$forecast_period)-years(1) ) )\n\n    if ( (forecasting_period$year[1] - 1) %% 4 == 0 ){#Checking if last year was a leap year\n      b <- b[-(1:2), ]\n    }else{\n      b <- b[-(1:1), ]\n    }\n    j <- min(which(forecasting_period$country_code == i ))#Find position of where country starts\n    nye <- monthly_percentage[ monthly_percentage$Country_Code == i &\n                               monthly_percentage$month == 12 &\n                               day(monthly_percentage$Activation_date) == 31 &\n                               monthly_percentage$year == (forecasting_period$year[1]-1) , ]\n    b <- normalise_by_month(b, nye, period$forecast_period)\n    forecasting_period$volume[seq(j, j - 1 + length(b[, 1]))] <- b$updated_normalised_daily\n  } #Map 1st Monday last year to 1st Monday this year etc...\n  forecasting_period[is.na(forecasting_period)] <- 0\n  f <- forecasting_period\n# forecasting_period<-f\n\n#Add BF_effect -----------------------------------------------------------------\nfor(i in markets){\n  j <- max(which(forecasting_period$day == 6 & #FRIDAY\n                   forecasting_period$month == 11 &\n                   forecasting_period$country_code == i ))#Finds row for BF\n  if(is.finite(j)){\n  forecasting_period$volume[(j - 4):(j + 7)] <- forecasting_period$volume[(j - 4):(j + 7)]*bf_effect[bf_effect$country == i, 2:13]\n  }else{\n    print(\"Black Friday not found\")\n    print(i)\n  }\n}\nforecasting_period$volume <- unlist(forecasting_period$volume)\n\n#Add Xmas_effect----------------------------------------------------------------\nfor(i in markets){\n  j <- which(day(forecasting_period$forecast_period) == 24 &\n                   forecasting_period$month == 12 &\n                   forecasting_period$country_code == i)#Finds row for BF\n  if(is.finite(j)){\n  forecasting_period$volume[(j - 2):(j + 7)] <- forecasting_period$volume[(j - 2):(j + 7)]*xmas_effect[xmas_effect$country == i, 2:11]\n  } else{\n    print(\"Christmas not found\")\n    print(i)\n  }\n}\nforecasting_period$volume <- unlist(forecasting_period$volume)\n\n#Add Red Days-------------------------------------------------------------------\nrd_effect[is.na(rd_effect)] <- 0\nfor(i in seq(1, length(rd_effect$Date))){\n  if((rd_effect$effect[i] == 0) | (rd_effect$holiday_name[i] %in% c(\"New Year's Eve\")) )\n    {\n    #do nothing\n  }#If holidays have no recorded effect of NYE\n  else {\n  c <- forecasting_period$country_code == rd_effect$country[i] &\n       forecasting_period$forecast_period == rd_effect$Date[i]\n\n  forecasting_period$volume[c] <- forecasting_period$volume[c]*rd_effect$effect[i]\n\n  next_wd <-min( which(forecasting_period$forecast_period > rd_effect$Date[i]\n                       & forecasting_period$country_code == rd_effect$country[i]\n                       & !(forecasting_period$forecast_period %in% rd_effect$Date)\n                       & (forecasting_period$day %in% c(2, 3, 4, 5, 6) ) ) ) #Monday to Friday\n\n  forecasting_period$volume[next_wd] <- forecasting_period$volume[next_wd]*rd_effect$next_wd_effect[i]\n  } #Add the effect of Red Day\n} #Looping through all holidays\n\n#Normalise After adding the Red Days--------------------------------------------\nm_total <- forecasting_period %>%\n  group_by(country_code, year, month) %>%\n  summarise(t_monthly = sum(volume))\n\nforecasting_period <- left_join(forecasting_period, m_total,by = c(\"country_code\" = \"country_code\", \"month\" = \"month\"))\n\nforecasting_period <- forecasting_period %>%\n  mutate(volume = volume/t_monthly) %>%\n  select(country_code,\n         forecast_period,\n         year.x,\n         month,\n         week,\n         day,\n         volume)\n#write_excel_csv(f, \"X:/public/R folder/Intra Month Distribution/intramonth_distribution/indexes.csv\")\n#write_excel_csv(forecasting_period, \"X:/public/R folder/Intra Month Distribution/intramonth_distribution/Monthly_indexes.csv\")\n#Return and Write---------------------------------------------------------------\nreturn(forecasting_period)\n\n\n}\n\n\n\n",
    "created" : 1485859274212.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1226188193",
    "id" : "76FC68EC",
    "lastKnownWriteTime" : 1487072671,
    "last_content_update" : 1487072671369,
    "path" : "~/R/Packages/intraMonthDist/intraMonthDist/R/intra_month.R",
    "project_path" : "R/intra_month.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}