{
    "collab_server" : "",
    "contents" : "remove_rd <- function(d_p, rd_effect){\n  #'Remove red days; 2 years back in time.\n  #'\n  #'DESCRIPTION HERE\n  #'\n  #'@param d_p data frame with daily actuals data. Defaults to daily_purchases_act.\n  #'@param rd_effect Matrix with historical red day effect.\n  #'@keywords red_day holiday\n  #'@export\n  #'@examples\n  #'EXAMPLE HERE\n\n  last_year <- 2016\n  holidays <- holiday_scraper()\n  holidays$Date = as.Date(holidays$Date,\"%b %d\")\n  year(holidays$Date) <- holidays$year\n  levels(holidays$country) <-c(\"se\",\"at\",\"no\",\"dk\",\"fi\",\"de\",\"nl\",\"uk\",\"us\")\n  holidays <- holidays %>%\n   mutate_if(is.factor,as.character)%>%\n    arrange(country,Date)\n     for (i in c(\"at\",\"de\",\"dk\",\"fi\",\"nl\",\"no\",\"se\")){\n#Defining and Choosing Red Days from Holiday Scraper----------------------------\n       # i=\"se\"\n       if(i == \"at\"){\n         red_days <-c(\"National holiday\")\n       }else if(i == \"de\"){\n         red_days <-c(\"Silent Day\",\"National holiday\",\"Common Local holidays\")\n       }else if(i == \"dk\"){\n         red_days <-c(\"National holiday\")\n       }else if(i == \"fi\"){\n         red_days <-c(\"De facto holiday\",\"National holiday\")\n       }else if(i == \"nl\"){\n         red_days <-c(\"National holiday\")\n       }else if(i == \"no\"){\n         red_days <-c(\"National holiday\",\"National holiday, Flag day\")\n       }else if(i == \"se\"){\n         red_days <-c(\"De facto holiday\",\"Public holiday\")\n       }\n      c_holidays <- holidays %>%\n        filter(country == i,\n               year == last_year,\n               holiday_type %in% red_days)\n\n      #RD_TEMPS NEEDS TO BE CREATED FROM HOLIDAYS\n      rd_temp<-holidays %>%\n        filter(country == i,\n               year == last_year + 1,\n               holiday_type %in% red_days)%>%\n        select(country,year,Date,holiday_name)%>%\n        mutate(effect = 0)%>%\n        mutate(next_wd_effect=0)%>%\n        mutate(month=month(Date))\n\n      working_days <- d_p %>%\n        filter(Country_Code == i,\n               year == last_year,\n               !(Activation_date %in% c_holidays$Date) )###MAKE SURE ONLY RED DAYS ARE REMOVED\n      b <- d_p %>%\n        filter(d_p$Country_Code == i,\n               d_p$year == last_year)\n#Loop through Holiday-----------------------------------------------------------\n      for (k in seq(1,length(c_holidays$Date) ) ){\n        # k<-1\n        #Change volume to next same working day\n        if(\n          ( (weekdays(c_holidays$Date[k]) %in% c(\"Saturday\",\"Sunday\") ) |\n          (c_holidays$holiday_name[k] %in% c(\"Christmas Eve\",\"Christmas Day\",\"Boxing Day\",\"New Year's Eve\") ) )\n          )\n        {\n          if(weekdays(c_holidays$Date[k]) %in% c(\"Saturday\",\"Sunday\") ){\n\n            #We want to make sure the holiday doesn't always fall on a weekend....checking 2 years is enough\n\n          }\n        }\n        else{\n            next_same_weekday <- min( which(\n                             working_days$day == weekdays(c_holidays$Date[k])\n                             & working_days$Activation_date > c_holidays$Date[k]\n                             & working_days$Country_Code == i ) )\n            #perhaps change to average between next_same_weekday and previous_same_weekday\n\n            rd_temp$effect[k]<- b$Daily_Volume[b$Activation_date == c_holidays$Date[k] ] - working_days$Daily_Volume[next_same_weekday]\n\n            b$Daily_Volume[b$Activation_date == c_holidays$Date[k] ] <- working_days$Daily_Volume[next_same_weekday]\n\n\n\n            next_work_day <- min( which(working_days$Activation_date > c_holidays$Date[k]\n                                        & working_days$Country_Code == i\n                                        & (working_days$day %in% c(\"Monday\",\"Tuesday\",\n                                          \"Wednesday\",\"Thursday\",\"Friday\") ) ) )\n            next_work_day_sw <- min( which(working_days$Activation_date > working_days$Activation_date[next_work_day]\n                                  & working_days$Country_Code == i\n                                  & working_days$day == working_days$day[next_work_day] ) )\n\n            rd_temp$next_wd_effect[k]<-b$Daily_Volume[b$Activation_date == working_days$Activation_date[next_work_day]] - working_days$Daily_Volume[next_work_day_sw]\n\n            b$Daily_Volume[b$Activation_date == working_days$Activation_date[next_work_day]] <- working_days$Daily_Volume[next_work_day_sw]\n\n\n        }\n\n      }\n\n\n      d_p[d_p$Country_Code == i & d_p$year == last_year, ] <- b\n\n\n#Quantify Black Friday and Xmas effects\n#Removing Black Friday Effect---------------------------------------------------\n      b <- d_p[d_p$Country_Code == i & d_p$year == last_year, ]\n      j <- max(which(b$day == \"Friday\" & b$month == 11 ))#Finds row for BF\n      print(j)\n      b$Daily_Volume[(j-4):(j+7)] = 0\n      myts <- ts(b$Daily_Volume[(j+22):(j+8)],end =c(2016), frequency=7)\n      fit <- stl(myts,s.window=7,s.degree=1)\n      bf_effect <- b$Daily_Volume[(j+7):(j-4)] - forecast(fit,h=12)[[2]]\n      b$Daily_Volume[(j+7):(j-4)] <- forecast(fit,h=12)[[2]]\n      d_p[d_p$Country_Code == i & d_p$year == last_year, ] <- b\n\n#Removing Christmas Effect------------------------------------------------------\n\n      # remember to add xmas condition which Monday it peaks\n      b <- d_p[d_p$Country_Code == i & d_p$year == last_year, ]\n      j <- which(b$month == 12 & day(b$Activation_date) == 24 )#Finds row for xmas eve\n      b$Daily_Volume[(j-2):(j+7)] = 0\n      myts <- ts(b$Daily_Volume[(j-17):(j-3)],end =c(2016), frequency=7)\n      fit <- stl(myts,s.window=7,s.degree=1)\n      xmas_effect <-0\n      b$Daily_Volume[(j-2):(j+7)] <- forecast(fit,h=10)[[2]]\n      d_p[d_p$Country_Code == i & d_p$year == last_year, ] <- b\n\n#Creating Indexes for RD effects-----------------------------------------------\n      total_monthly <- b %>%\n        group_by(month) %>%\n        summarise(monthly_vol = sum(Daily_Volume))\n\n      rd_temp <- left_join(rd_temp,total_monthly,by = \"month\")\n      rd_temp <- rd_temp%>%\n        mutate(effect = effect/monthly_vol)%>%\n        mutate(next_wd_effect = next_wd_effect/monthly_vol)%>%\n        select(country,year,Date,holiday_name,effect,next_wd_effect,month)\n\n      bf_effect <- bf_effect/total_monthly$monthly_vol[11]\n\n      rd_effect <- rbind(rd_effect,rd_temp)\n\n     }\n  l=list(d_p,rd_effect,bf_effect,xmas_effect)\n  return(l)\n}\n",
    "created" : 1487072511788.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2288070151",
    "id" : "DC632B9C",
    "lastKnownWriteTime" : 1487072912,
    "last_content_update" : 1487072912039,
    "path" : "~/R/Packages/intraMonthDist/intraMonthDist/R/remove_rd.R",
    "project_path" : "R/remove_rd.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}